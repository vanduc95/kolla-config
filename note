# Guide --> https://docs.openstack.org/kolla-ansible/yoga/user/quickstart.html

1. Container iscsid: Can not bind IPC socket
systemctl stop iscsid.socket
systemctl disable iscsid.socket

2. Install docker

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

vim /etc/docker/daemon.json
{
  "live-restore": true
}


apt install -y fish vim

pip install docker 

pip install python-openstackclient==5.8.1

tool deploy - https://github.com/vanduc95/kolla-ansible.git

[defaults]
host_key_checking=False
pipelining=True
forks=100

pvcreate /dev/vdb /dev/vdc
vgcreate cinder-volumes /dev/vdb /dev/vdc


filter = [ "a/sda/", "a/sdb/", "a/sdc/", "a/sdd/", "a/sde/", "a/sdf/" "r/.*/"]

openstack image create "Ubuntu2004" --file ubuntu-20.04-server-cloudimg-amd64.img --disk-format qcow2 --container-format bare --public

network create VLAN100 --provider-physical-network physnet1 --provider-network-type vlan --provider-segment 100 --share --external



https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img


#cloud-config
ssh_pwauth: True
chpasswd:
  list: |
    root:123456
  expire: False


wget https://drive.usercontent.google.com/download?id=17U7B6qgHjmQ0qnjb54mCu8I_bpU0MW5F&export=download&authuser=0&confirm=t&uuid=0c65f230-5979-45a2-b759-c997f6ced1aa&at=APZUnTUGCqxz6ddS7VbMFb7flcLd:1716464550661


# All commands will be executed on a Proxmox host
sudo apt update -y && sudo apt install libguestfs-tools -y
wget https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
# Install qemu-guest-agent on the image. Additional packages can be specified by separating with a comma.
sudo virt-customize -a jammy-server-cloudimg-amd64.img --install qemu-guest-agent
# Read and set root user password from file.
sudo virt-customize -a jammy-server-cloudimg-amd64.img --root-password file:password_root.txt
# Create an additional user.
sudo virt-customize -a jammy-server-cloudimg-amd64.img --run-command "useradd -m -s /bin/bash myuser"
# Set password for that user.
sudo virt-customize -a jammy-server-cloudimg-amd64.img --password myuser:file:password_myuser.txt
# Delete temporary password files safely.
shred -uv password_root.txt password_myuser.txt
# Optional: Install fish shell.
sudo virt-customize -a jammy-server-cloudimg-amd64.img --run-command "apt-add-repository ppa:fish-shell/release-3 --yes"
sudo virt-customize -a jammy-server-cloudimg-amd64.img --install fish
sudo virt-customize -a jammy-server-cloudimg-amd64.img --run-command "chsh -s /usr/bin/fish myuser"
# Finally, update all packages in the image.
sudo virt-customize -a jammy-server-cloudimg-amd64.img --update

# Next, we create a Proxmox VM template.
# Change values for your bridge and storage and change defaults to your liking.
sudo qm create 777 --name "ubuntu-20.04-template" --memory 2048 --cores 2 --net0 virtio,bridge=vmbr0
sudo qm importdisk 777 jammy-server-cloudimg-amd64.img zfs
sudo qm set 777 --scsihw virtio-scsi-pci --scsi0 zfs:vm-777-disk-0
sudo qm set 777 --boot c --bootdisk scsi0
sudo qm set 777 --ide2 zfs:cloudinit
sudo qm set 777 --serial0 socket --vga serial0
sudo qm set 777 --agent enabled=1
sudo qm template 777

ghp
_ducnv41kwMOSbiSN
ducnv41f9LbzCMqzCRJHLPmwHlnc0lx8kX

qemu-img convert -f vmdk Linux.vmdk -O qcow2 vmware_linux.qcow2

openstack image create "Ubuntu22.04_pass_default" --file jammy-server-cloudimg-amd64.img --disk-format qcow2 --container-format bare --public

openstack image create "vmware_poc" --file /root/vmware_linux.qcow2 --disk-format qcow2 --container-format bare --public
